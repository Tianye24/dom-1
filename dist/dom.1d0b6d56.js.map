{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","console","log","nextSibling","parentNode","insertBefore","before","append","parent","appendChild","wrap","remove","removeChild","empty","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener","find","selector","scope","querySelectorAll","children","siblings","Array","from","filter","n","next","nodeType","previous","previousSibling","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\r\n    //新建全局对象dom，这样我们就可以往这个对象里面增加东西，哪儿都可以用来\r\n    //一、增加\r\n    //1.函数create\r\n    create(string) {\r\n        //参数是我们想加入的HTML\r\n        const container = document.createElement(\"template\");//新建一个元素template当容器\r\n        container.innerHTML = string.trim();//把HTML内容加入容器中，成为容器的第一个小孩//(字符串两边的空格已被去掉，不然前面有空格就不是第一个小孩了)\r\n        return container.content.firstChild;//返回第一个小孩也就是我们要加的HTML\r\n    },\r\n    //2.after函数用于给node新建个弟弟node2\r\n    after(node,node2) {\r\n        console.log(node.nextSibling);\r\n        node.parentNode.insertBefore(node2,node.nextSibling);//在node的爸爸使用在我里面 的 node后面的那个节点的前面插入node2\r\n    },//就算没有下个节点也可以成功\r\n    //3.before函数用于给node新建个哥哥node2\r\n    before(node,node2){\r\n        node.parentNode.insertBefore(node2,node);//在node的爸爸使用在我里面 的 node前面插入node2\r\n    },\r\n    //4.append函数用于新建个儿子\r\n    append(parent,node){\r\n        parent.appendChild(node)\r\n    },\r\n    //5.wrap函数用于新建个爸爸\r\n    wrap(node,parent){\r\n        dom.before(node,parent)//先让parent当node的哥哥\r\n        dom.append(parent,node) //让parent的儿子是node//appendChild函数对最新的爸爸叫爸爸，以前的爸爸里面会被删掉\r\n    },\r\n    //二、删除\r\n    //1.remove函数用于删除节点\r\n    remove(node){\r\n        node.parentNode.removeChild(node)//让这个节点的爸爸删除这个儿子\r\n        return node//还可以保留这个节点的引用\r\n    },\r\n    //2.empty函数用于删除后代\r\n    empty(node){\r\n        const array = []\r\n        let x =node.firstChild\r\n        while(x){\r\n            array.push(dom.remove(node.firstChild))\r\n            x = node.firstChild\r\n        }\r\n        return array\r\n    },\r\n    //三、改\r\n    //1.attr函数用于读写一个节点的属性\r\n    attr(node, name, value){//重载：根据参数的长度实现不同的效果\r\n        if(arguments.length === 3){\r\n          node.setAttribute(name,value)//如果长度为3就set\r\n        }else if(arguments.length ===2){\r\n            return node.getAttribute(name)//如果长度为2就get\r\n        }\r\n    },\r\n    //text函数读写一个节点里的文本内容，会覆盖\r\n    text(node,string){//适配\r\n        if(arguments.length ===2){\r\n            if('innerText' in node){\r\n                node.innerText = string\r\n            }else{\r\n                node.textContent = string\r\n        }\r\n    }else if(arguments.length ===1){\r\n        if('innerText' in node){\r\n            return node.innerText\r\n        }else{\r\n            return node.textContent\r\n        }\r\n        }\r\n        \r\n    },\r\n    //html函数读写一个节点里的html内容，会覆盖\r\n    html(node,string){\r\n        if(arguments.length ===2){\r\n            node.innerHTML = string\r\n        }else if(arguments.length ===1){\r\n            return node.innerHTML\r\n        }\r\n    },\r\n    //style函数读写一个节点的style属性\r\n    style(node, name, value){\r\n        if(arguments.length===3){\r\n        //dom.style(test,'color','red')增加或改color\r\n            node.style[name] = value\r\n        }else if(arguments.length===2){\r\n            if(typeof name === 'string'){\r\n             //dom.style(test,'color') 读\r\n                return node.style[name]\r\n            }else if(name instanceof Object){\r\n            // dom.style(test, {color: \"red\" }) 增加或改所有style属\r\n                const object = name\r\n                for(let key in object){\r\n                    node.style[key] = object[key]\r\n                }\r\n            }\r\n          }\r\n        },\r\n    //class函数用于增加、删除、检查元素的class属性值 \r\n    class: {\r\n        add(node, className){\r\n            node.classList.add(className)\r\n        }, //在一个对象里，可以这样声明一个函数 //相当于'add':function (){}\r\n        remove(node, className){\r\n            node.classList.remove(className)\r\n        },\r\n        has(node, className){\r\n            return node.classList.contains(className)\r\n        }\r\n    },\r\n    //on函数用于添加事件监听\r\n    on(node, eventName, fn){\r\n        node.addEventListener(eventName, fn)\r\n    },\r\n    //off函数用于删除事件监听\r\n    off(node, eventName, fn){\r\n        node.removeEventListener(eventName, fn)\r\n    },\r\n    //四、查\r\n    //find函数查看满足选择器的所有元素\r\n    find(selector, scope){\r\n        return(scope || document).querySelectorAll(selector)//如果有scope，就用scope调用querySelectorAll，如果没有，就用document调用\r\n    },\r\n    //parent函数找一个节点的爸爸\r\n    parent(node){\r\n        return node.parentNode\r\n    },\r\n    //children函数找一个节点的儿子  //会实时变化\r\n    children(node){\r\n        return node.children\r\n    },\r\n    //)siblings函数找一个节点的所有兄弟姐妹\r\n    siblings(node){\r\n        return Array.from(node.parentNode.children)\r\n        .filter(n=>n!==node)//把伪数组变成数组，在用filter过滤，选择不是node本身的节点\r\n    },\r\n    //next函数找一个节点的弟弟\r\n    next(node){\r\n        let x = node.nextSibling\r\n        while(x && x.nodeType === 3){//如果x存在，而且他是文本节点\r\n            x = x.nextSibling//就让他的弟弟成为新x\r\n        }//直到x不存在或者x不是文本节点就可以停下了\r\n        return x\r\n    },\r\n    //previous函数找一个节点的哥哥\r\n    previous(node){\r\n        let x = node.previousSibling //把节点的哥哥叫做x\r\n        while(x && x.nodeType === 3){ //如果x存在，而且他是文本节点\r\n            x = x.previousSibling//就让他的哥哥成为新x\r\n        }//直到x不存在或者x不是文本节点就可以停下了\r\n        return x\r\n    },\r\n    //each函数遍历范围内所有节点，执行自写函数\r\n    each(nodeList, fn){\r\n        for(let i=0;i<nodeList.length;i++){\r\n            fn.call(null, nodeList[i])\r\n        }\r\n    },\r\n    //index函数用于获取一个节点排行老几\r\n    index(node){\r\n        const list = dom.children(node.parentNode)//因为会实时变化，所以就先把他固定起来\r\n        let i\r\n        for(i=0;i<list.length;i++){\r\n            if(list[i] === node){\r\n                break\r\n            }\r\n        }\r\n        return i \r\n      }\r\n \r\n};\r\n\r\n\r\n"]}